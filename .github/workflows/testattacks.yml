name: Test Attacks CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Workflow level environment variables
env:
  ATTACKREPO: "https://raw.githubusercontent.com/cnagda/id-pirated-vid-attackvids/master/attackvids/"


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  refresh-cache:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: deps
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libavcodec-dev libavresample-dev libavformat-dev libswscale-dev libgtk-3-dev
    - name: Cache OpenCV
      id: cache-opencv
      uses: actions/cache@v1
      with:
        path: OpenCV # npm cache files are stored in `~/.npm` on Linux/macOS
        key: OpenCV-nofail3
    - name: OpenCV
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      run: |
        mkdir $GITHUB_WORKSPACE/OpenCV
        cd $GITHUB_WORKSPACE/OpenCV
        git clone --depth=1 --branch 4.2.0 https://github.com/opencv/opencv.git
        git clone --depth=1 --branch 4.2.0 https://github.com/opencv/opencv_contrib.git
        mkdir build
        cd build
        cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local \
        -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules -D WITH_FFMPEG=ON -D WITH_OPENMP=ON \
        -DOPENCV_ENABLE_NONFREE=ON -D BUILD_EXAMPLES=OFF -WITH_GTK=ON -D BUILD_opencv_apps=OFF -D BUILD_DOCS=OFF \
        -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF ../opencv
        make -j8
       
  # Query with one attack video
  query:
    needs: refresh-cache
    strategy:
      matrix:
        vid: [CNAU0235000H_exact_match.mp4, CNAU0235000H_exact_match_inserted.mp4]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: deps
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libavcodec-dev libavresample-dev libavformat-dev libswscale-dev libgtk-3-dev libboost-dev libeigen3-dev libtbb-dev
    
    - name: Cache OpenCV
      id: cache-opencv
      uses: actions/cache@v1
      with:
        path: OpenCV
        key: OpenCV-nofail3
    
    - name: Install OpenCV
      run: |
        cd $GITHUB_WORKSPACE/OpenCV/build
        sudo make install
        
    - name: configure
      run: |
        mkdir build
        cd build
        cmake ../
        
    - name: make
      run: cmake --build build/ 
      
#     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#     - name: checkout main 
#       uses: actions/checkout@v2
    
    - name: checkout database
      uses: actions/checkout@v2
      with:
        repository: cnagda/id-pirated-vid-db
        path: id-pirated-vid-db
    
    # Download the video from the attackvids repo
    - name: download video
      run: |
        echo ${ATTACKREPO}${{ matrix.vid }}
        curl -LJO ${ATTACKREPO}${{ matrix.vid }}
        ls
        mkdir results
        python3 python/tester.py ${{ matrix.vid }} id-pirated-vid-db/database
    
          
  # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#     - name: checkout main 
#       uses: actions/checkout@v2
      
#     - name: checkout attackvids
#       uses: actions/checkout@v2
#       with:
#         repository: cnagda/id-pirated-vid-attackvids
#         path: id-pirated-vid-attackvids 

#     # Runs a single command using the runners shell
#     - name: Run a one-line script
#       run: ls id-pirated-vid-attackvids > dirlisting.txt
    
#     - uses: actions/upload-artifact@v1
#       with:
#         name: dirlisting
#         path: dirlisting.txt

#     # Runs a set of commands using the runners shell
#     - name: Run a multi-line script
#       run: |
#         echo Add other actions to build,
#         echo test, and deploy your project.
  
